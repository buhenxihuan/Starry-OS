var searchIndex = new Map(JSON.parse('[\
["axlibc",{"doc":"ArceOS user program library for C apps.","t":"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["abort","accept","ax_fcntl","ax_open","bind","clock_gettime","close","connect","dup","dup2","dup3","epoll_create","epoll_ctl","epoll_wait","exit","free","freeaddrinfo","fstat","getaddrinfo","getcwd","getpeername","getpid","getrlimit","getsockname","listen","longjmp","lseek","lstat","malloc","mktime","nanosleep","pipe","pthread_create","pthread_exit","pthread_join","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_unlock","pthread_self","rand","random","read","recv","recvfrom","rename","select","send","sendto","setjmp","setrlimit","shutdown","socket","srand","stat","strerror","strftime","strtod","strtof","sysconf","write","writev"],"q":[[0,"axlibc"],[61,"core::ffi"],[62,"arceos_posix_api::ctypes"],[63,"arceos_posix_api::ctypes"]],"d":["Abort the current process.","Accept for connections on a socket","Manipulate file descriptor.","Open a file by <code>filename</code> and insert it into the file …","Bind a address to a socket.","Get clock time since booting","Close a file by <code>fd</code>.","Connects the socket to the address specified.","Duplicate a file descriptor.","Duplicate a file descriptor, use file descriptor specified …","Duplicate a file descriptor, the caller can force the …","Creates a new epoll instance.","Control interface for an epoll file descriptor","Waits for events on the epoll instance referred to by the …","Exits the current thread.","Deallocate memory.","Free queried <code>addrinfo</code> struct","Get file metadata by <code>fd</code> and write into <code>buf</code>.","Query addresses for a domain name.","Get the path of the current directory.","Get peer address to which the socket sockfd is connected.","Get current thread ID.","Get resource limitations","Get current address to which the socket sockfd is bound.","Listen for connections on a socket","<code>longjmp</code> implementation","Set the position of the file indicated by <code>fd</code>.","Get the metadata of the symbolic link and write into <code>buf</code>.","Allocate memory and return the memory address.","Convert broken-down time into time since the Epoch.","Sleep some nanoseconds","Create a pipe","Create a new thread with the given entry point and …","Exits the current thread. The value <code>retval</code> will be …","Waits for the given thread to exit, and stores the return …","Initialize a mutex.","Lock the given mutex.","Unlock the given mutex.","Returns the <code>pthread</code> struct of current thread.","Returns a 32-bit unsigned pseudo random interger.","Returns a 64-bit unsigned pseudo random number.","Read data from the file indicated by <code>fd</code>.","Receive a message on a socket.","Receive a message on a socket and get its source address.","Rename <code>old</code> to <code>new</code> If new exists, it is first removed.","Monitor multiple file descriptors, waiting until one or …","Send a message on a socket to the address connected.","Send a message on a socket to the address specified.","<code>setjmp</code> implementation","Set resource limitations","Shut down a full-duplex connection.","Create an socket for communication.","Sets the seed for the random number generator.","Get the file metadata by <code>path</code> and write into <code>buf</code>.","Returns a pointer to the string representation of the …","Convert date and time to a string.","Convert a string to a double-precision number.","Convert a string to a float number.","Return system configuration infomation","Write data to the file indicated by <code>fd</code>.","Write a vector."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"{{}b}{{dfh}d}{{ddj}d}{{ldn}d}2{{A`Ab}d}{dd}40{{dd}d}{{ddd}d}2{{dddAd}d}{{dAddd}d}{db}{AfAh}{AjAh}{{dAl}d}{{llAjAj}d}{{lj}l}>{{}d}{{dAn}d}{{dfh}d}<`{{dB`d}B`}{{lAl}d}{BbAf}`{{AbAb}d}{dd}{{BfBhAf}d}{Afb}{{BfAf}d}{{BjBl}d}{Bjd}0{{}Bf}={{}Bn}{{dAfj}C`}{{dAfBbd}C`}{{dAfBbdfh}C`}{{ll}d}{{dCbCbCbCd}d}32`{{dAn}d}{{dd}d}{{ddd}d}{CfAh}{{lAl}d}{dl}`{{ll}Ch}{{ll}Cj}{dBn}={{dCld}C`}","c":[],"p":[[1,"never"],[8,"c_int",61],[5,"sockaddr",62],[8,"socklen_t",62],[1,"usize"],[8,"c_char",61],[8,"mode_t",62],[8,"clockid_t",62],[5,"timespec",62],[5,"epoll_event",62],[6,"c_void",61],[1,"unit"],[5,"addrinfo",62],[5,"stat",62],[5,"rlimit",62],[8,"off_t",62],[8,"size_t",62],[8,"time_t",62],[8,"pthread_t",62],[5,"pthread_attr_t",62],[5,"pthread_mutex_t",62],[5,"pthread_mutexattr_t",62],[8,"c_long",61],[8,"ssize_t",62],[5,"fd_set",62],[5,"timeval",62],[8,"c_uint",61],[8,"c_double",61],[8,"c_float",61],[5,"iovec",62]],"b":[]}],\
["monolithic_userboot",{"doc":"The userboot of the operating system, which will start the …","t":"CHSHH","n":["batch","main","SDCARD_TESTCASES","get_args","run_batch_testcases"],"q":[[0,"monolithic_userboot"],[2,"monolithic_userboot::batch"],[5,"alloc::string"],[6,"alloc::vec"]],"d":["To allow for batch testing, we define a list of test cases …","","","分割命令行参数",""],"i":[0,0,0,0,0],"f":"`{{}b}`{{{f{d}}}{{j{h}}}}1","c":[],"p":[[1,"unit"],[1,"u8"],[1,"slice"],[5,"String",5],[5,"Vec",6]],"b":[]}],\
["percpu",{"doc":"Define and access per-CPU data structures.","t":"JFNNNNNXNHHNNHHNNHNNNNNN","n":["EXAMPLE_PERCPU_DATA","EXAMPLE_PERCPU_DATA_WRAPPER","borrow","borrow_mut","current_ptr","current_ref_mut_raw","current_ref_raw","def_percpu","from","get_local_thread_pointer","init","into","offset","percpu_area_base","percpu_area_size","read_current","read_current_raw","set_local_thread_pointer","try_from","try_into","type_id","with_current","write_current","write_current_raw"],"q":[[0,"percpu"],[24,"core::result"],[25,"core::any"],[26,"core::ops::function"]],"d":["Example per-CPU data for documentation only.","Wrapper struct for the per-CPU data <code>EXAMPLE_PERCPU_DATA</code>","","","Returns the raw pointer of this per-CPU data on the …","Returns the mutable reference of the per-CPU data on the …","Returns the reference of the per-CPU data on the current …","Defines a per-CPU data structure.","Returns the argument unchanged.","Read the architecture-specific thread pointer register on …","Initialize the per-CPU data area for <code>max_cpu_num</code> CPUs.","Calls <code>U::from(self)</code>.","Returns the offset relative to the per-CPU data area base …","Returns the base address of the per-CPU data area on the …","Returns the per-CPU data area size for one CPU.","Returns the value of the per-CPU data on the current CPU. …","Returns the value of the per-CPU data on the current CPU.","Set the architecture-specific thread pointer register to …","","","","Manipulate the per-CPU data on the current CPU in the …","Set the value of the per-CPU data on the current CPU. …","Set the value of the per-CPU data on the current CPU."],"i":[0,0,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1],"f":"``{ce{}{}}0{bd}00`{cc{}}{{}d}{df}43{dd}2441{c{{h{e}}}{}{}}0{cj{}}{{be}c{}{{n{d}{{l{c}}}}}}{{bd}f}0","c":[],"p":[[5,"EXAMPLE_PERCPU_DATA_WRAPPER",0],[1,"usize"],[1,"unit"],[6,"Result",24],[5,"TypeId",25],[17,"Output"],[10,"FnOnce",26]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
